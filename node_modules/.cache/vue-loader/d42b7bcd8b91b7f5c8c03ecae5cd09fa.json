{"remainingRequest":"/home/runner/work/U1_Sistemas_Integrados_de_Gestion/U1_Sistemas_Integrados_de_Gestion/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Sistemas_Integrados_de_Gestion/U1_Sistemas_Integrados_de_Gestion/src/views/curso/Tema3.vue?vue&type=template&id=017f0aaf&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Sistemas_Integrados_de_Gestion/U1_Sistemas_Integrados_de_Gestion/src/views/curso/Tema3.vue","mtime":1740360433479},{"path":"/home/runner/work/U1_Sistemas_Integrados_de_Gestion/U1_Sistemas_Integrados_de_Gestion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Sistemas_Integrados_de_Gestion/U1_Sistemas_Integrados_de_Gestion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Sistemas_Integrados_de_Gestion/U1_Sistemas_Integrados_de_Gestion/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Sistemas_Integrados_de_Gestion/U1_Sistemas_Integrados_de_Gestion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Sistemas_Integrados_de_Gestion/U1_Sistemas_Integrados_de_Gestion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}